@page "/"

@using Data.Models.Interfaces
@using Data.Models
@using Markdig;

@inject IBlogApi _api

<div class="mb-3 border border-5 rounded">
    <p><a href="/alerttest">alerttest</a></p>
</div>

<ul>
@*     @foreach(var p in posts)
    {
        <li><a href="/Post/@p.Id">@p.Title</a></li>
    } *@

    @* @context *@
    @*         <Virtualize Items="posts" Context="p">
    <li><a href="/Post/@p.Id">@p.Title</a></li>
    </Virtualize> *@

    
    <Virtualize ItemsProvider="LoadPosts" Context="p">
        @* <li style="font-size:150px"><a href="/Post/@p.Id">@p.Title</a></li> *@

        <h2>@p.Title</h2>
        @((MarkupString)Markdig.Markdown.ToHtml(
            new string(p.Text.Take(100).ToArray()), pipeline))
        <li><a href="/Post/@p.Id">@p.Title</a></li>
    </Virtualize>
</ul>


@code {
    // protected List<BlogPost> posts = new List<BlogPost>();

    // protected override async Task OnInitializedAsync()
    // {
    //     posts = await _api.GetBlogPostsAsync(10, 0);
    //     await base.OnInitializedAsync();
    // }

    public int totalBlogposts { get; set; }


    MarkdownPipeline pipeline = default!;
    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();

        return base.OnInitializedAsync();
    }


    private async ValueTask<ItemsProviderResult<BlogPost>> LoadPosts(ItemsProviderRequest request)
    {
        if (totalBlogposts == 0)
        {
            totalBlogposts = await _api.GetBlogPostCountAsync();
        }

        int numblogposts = Math.Min(
            request.Count, 
            totalBlogposts - request.StartIndex);

        List<BlogPost>? blogposts = await _api.GetBlogPostsAsync(
            numblogposts,
            request.StartIndex);

        return new ItemsProviderResult<BlogPost>(blogposts!, totalBlogposts);
    }
}